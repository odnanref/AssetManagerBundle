<?php

/**
 * This file belongs to the Far/AssetManagerBundle
 *
 * Copyright (C) 2013  Fernando AndrÃ© <netriver at gmail dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

namespace Far\AssetManagerBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{

    public function search($conds, $format = null)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('i')
            ->from('FarAssetManagerBundle:Item', 'i')
            ->innerJoin('FarAssetManagerBundle:Location', 'l', 'WITH', 'i.location = l')
            ->innerJoin('FarAssetManagerBundle:Aquiredtype', 'aq', 'WITH', 'i.aquiredtype = aq')
            ->innerJoin('FarAssetManagerBundle:Typeofitem', 'toi', 'WITH', 'i.typeofItem = toi')
            ->innerJoin('FarAssetManagerBundle:Protocol', 'proto', 'WITH', 'i.protocol = proto')
            ->innerJoin('FarAssetManagerBundle:NcmReference', 'ncm', 'WITH', 'i.ncmReference= ncm')
            ->innerJoin('FarAssetManagerBundle:State', 'state', 'WITH', 'i.state = state');

        if ($conds != null ) {
            foreach ($conds as $ky => $val) {
                if ($ky == 'submit' || $ky == '_token') {
                    continue;
                }
                if ($ky == 'datain' || $ky == 'dataviewed' || $ky == 'dataout') {
                    if (trim($val['year']) != '' ) {
                        $tmp = $val['year'] . "-" . $val['month'] . "-" . $val['day'];
                    } else {
                        $tmp = '';
                    }
                } else {
                    $tmp = $val;
                }

                if (is_numeric($tmp) && $tmp == 0 ) {
                    $tmp = '';
                }

                if (trim($tmp) != '') {
                    if ($ky == 'description' || $ky == 'supplier' || 
                        $ky == 'supplier_note_number') 
                    {
                        $qb->andWhere( 'i.' . $ky . ' LIKE :id'.$ky)
                            ->setParameter("id$ky", $tmp);
                    } else {
                        $sign = '=';
                        if (strpos($tmp, '>') === 0 ) {
                            $sign = '>';
                            $tmp = mb_substr($tmp, 1, strlen($tmp));
                        }
                        if (strpos($tmp, '<') !== false) {
                            $sign = '<';
                            $tmp = mb_substr($tmp, 0, -1);
                        }
                        // defined the sign and the val search the content
                        $qb->andWhere( 'i.' . $ky . ' ' . $sign . ' :id'.$ky)
                            ->setParameter("id$ky", $tmp);
                    }
                }
            }
        }
        //
        $query = $qb->getQuery();
        //
        if ($format == 'array') {
            return $query->getArrayResult();
        } else {
            return $query->getResult();
        }
    }
}
